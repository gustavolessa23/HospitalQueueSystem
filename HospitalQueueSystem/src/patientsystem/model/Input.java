package patientsystem.model;

import java.util.InputMismatchException;
import java.util.Scanner;

import patientsystem.lib.Validation;
import patientsystem.view.View;

/**
 * Class representing the input, using Scanner and Validation classes.
 * @author Gustavo Lessa
 *
 */
public class Input {

	private Scanner scan; // Scanner to retrieve input.
	private Validation validate; // Validation instance, to validate input.

	/**
	 * Constructor that initializes variables.
	 */
	public Input() {
		scan = new Scanner(System.in);
		validate = new Validation();
	}

	/**
	 * Method responsible for checking if the input is a String
	 * @return String input
	 */
	public String getNextString() {
		String line = "";
		while(line.isEmpty())
			line = scan.nextLine();
		
		return line;
	}

	/**
	 * Method responsible for checking if the input is an Integer, considering a limit.
	 * @param limit
	 * @return validated input.
	 */
	public int getNextInt(int limit) {
		int typedInt = -100;
		try{
			while(typedInt == -100) // while variable doesn't change
				typedInt = scan.nextInt(); // retrieve next int and save to that variable.

			if(!validate.checkForInt(typedInt, 1, limit)) { // if the validation returns false
				View.displayError("\n*** The option should be and integer between 1" // display error messagge
						+ " and "+limit+". ***\n");
				View.displayError("Please try again:");
				return getNextInt(limit); // call method again
				
			} else { // if validation is successful
				return typedInt; // return validated int
			}
			
		} catch(InputMismatchException e){ // if input is not an integer
			View.displayError("\n*** Input is not an integer. ***\nPlease try again.\n"); // display message
			scan.nextLine(); // flush scanner
			return getNextInt(limit); // recursively call this method again.
		}
	}

	/**
	 * Method responsible for retrieving a validated phone number from user input.
	 * @return validated phone number input
	 */
	public String getPhoneNumber() {

		try {
			String phone = validate.checkPhoneNumber(getNextString()); // try to retrieve a validated phone number
			return phone; // return it
		}catch (IllegalArgumentException e){
			View.displayError("\n*** Incorrect phone number format. Please try again. ***\n"); // display message
			return getPhoneNumber(); // recursively call this method again		
		}
	}
	
	/**
	 * Method responsible for retrieving a validated PPS number from user input.
	 * @return validated PPS Number input
	 */
	public String getPpsNumber() {
		
		try {
			String pps = validate.checkPpsNumber(getNextString()); // try to retrieve a validated PPS number
			return pps;
			
		}catch (IllegalArgumentException e){
			View.displayError("\n*** Incorrect PPS number format. Please type 7 digits followed by 1 or 2 letters. ***\n"); // display message
			return getPpsNumber(); // recursively call this method again.
		}
	}

	/**
	 * Method responsible for retrieving a validated e-mail address from user input.
	 * @return validated email input
	 */
	public String getEmail() {

		try {
			String email = validate.checkEmail(getNextString()); // try to retrieve a validated e-mail address
			return email;
			
		}catch (IllegalArgumentException e){
			View.displayError("\n*** Incorrect e-mail address format. Please try again. ***\n"); // display message
			return getEmail(); // recursively call this method.

		}
	}

	/**
	 * Method responsible for retrieving a validated PID number from user input.
	 * @return validated PID number.
	 */
	public int getPid() {
		return getNextInt(Patient.getLastPid()); // return validated int considering the last PID generated by the system.
	}

	/**
	 * Method responsible for retrieving a validated Y/N answer from user.
	 * @return true if user answered yes, false otherwise.
	 */
	public boolean isYes() {
		String answer = "";
		try{
			while(answer.isEmpty())
				answer = scan.nextLine(); // get next line of input

			return validate.checkForYes(answer); // return validated answer, true if user input is yes or y.

		} catch(IllegalArgumentException e){ // if something different was typed.
			View.displayError("\\n*** Please type Yes(Y) or No(N) only. ***\\n"); // display message
			return isYes(); // call itself 
		}
	}


}
